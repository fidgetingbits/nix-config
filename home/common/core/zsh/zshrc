# shellcheck disable=SC2148
## yubikey-agent
# export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/yubikey-agent/yubikey-agent.sock"

# Override some GUI entries if inside ssh session
if [[ -n $SSH_CONNECTION ]]; then
	export GIT_EDITOR="nvim"
	export EDITOR="nvim"
	export VISUAL="nvim"

	# git can't handle ssh-add -L output with a yubikey sk-ssh entry, so we alias git
	# here to force it to use the ssh-agent output
	TEMP_KEY=$(mktemp)
	ssh-add -L | head -n 1 >"$TEMP_KEY"
	alias git="git -c user.signingKey=$TEMP_KEY"
fi

unsetopt correct # autocorrect commands

setopt hist_ignore_all_dups # remove older duplicate entries from history
setopt hist_reduce_blanks   # remove superfluous blanks from history items
setopt inc_append_history   # save history entries as soon as they are entered
setopt share_history        # share history between different instances of the shell

# auto complete options
setopt auto_list                                                            # automatically list choices on ambiguous completion
setopt auto_menu                                                            # automatically use menu completion
setopt always_to_end                                                        # move cursor to end if word had one match
zstyle ':completion:*' menu select                                          # select completions with arrow keys
zstyle ':completion:*' group-name ""                                        # group results by category
zstyle ':completion:::::' completer _expand _complete _ignored _approximate # enable approximate matches for completion

# Keep history of `cd` as in with `pushd` and make `cd -<TAB>` work.
# shellcheck disable=SC2034
DIRSTACKSIZE=16
setopt auto_pushd
setopt pushd_ignore_dups
setopt pushd_minus

##
# zle key remapping
# NOTE: These are mostly used for voice mappings. Better to just use vi mode when outside voice.
##

# ^[3~ is sent by many terminals for the delete key
bindkey '^[[3~' delete-char
# ^[3;5~ is sent by some terminals for ctrl+delete key
bindkey '^[3;5~' delete-char
bindkey '^[[K' backward-kill-line
bindkey '^[[U' undo # ^_ seems to be zoom related in wezterm
bindkey '^[[Z' redo
bindkey '^[[b' vi-backward-blank-word
bindkey '^[[f' vi-forward-blank-word
bindkey -r '^@' # This fucks up on my system, but I still need set-mark-command
bindkey '^[[m' set-mark-command
bindkey '^[%' vi-match-bracket
bindkey '^X^P' vi-find-prev-char
bindkey '^[^K' kill-whole-line

# Default is ctrl-x ctrl-v
bindkey '^]' vi-cmd-mode

# FIXME(zsh): Figure out how todo the indenting for junk for zle
# function indent-line {
#     zle set-mark-command
#     zle beginning-of-line
#     zle redisplay
#     zle -U $'\t'
#     zle exchange-point-and-mark
# }

# function unindent-line {
#     zle -M set-mark-command
#     zle -M beginning-of-line
#     zle redisplay

#     # If the line starts with a tab or a space, delete it
#     if [[ $LBUFFER == $'\t'* ]]; then
#         zle -U $'\C-h'
#     elif [[ $LBUFFER == ' '* ]]; then
#         zle -U $'\C-h'
#     fi
#     CURSOR=$MARK
#     # zle redisplay
# }

# zle -N indent-line
# zle -N unindent-line

bindkey '^[>' indent-line
bindkey '^[<' unindent-line

# This is for debugging only...
function zle-show-mark {
	zle -M "Cursor at $CURSOR, Mark at $MARK"
}
zle -N zle-show-mark
bindkey '^[[[m' zle-show-mark

##
# Navigation
##

# https://github.com/junegunn/fzf/wiki/examples#changing-directory
# shellcheck disable=SC2034
FZF_CMD="fzf --preview 'ls | head -n 10' --height=10 --reverse +m"
# fuzzy directory deep
# --preview 'awk -v n={1} -v l=1 "{print l==n ? 0 \" \" \$0 : l \" \" \$0; l++}"'
#         -o -type d -print 2>/dev/null | fzf --preview 'ls -l {} | head -n 10' --height=10 --reverse +m) &&

# Auto select fzf result if only one match
# https://github.com/junegunn/fzf/issues/27
function fzf_auto_select() {
	local lines
	lines=$(fzf --filter="$1" --no-sort)
	if [ -z "$lines" ]; then
		return 1
	elif [ $(wc -l <<<"$lines") -eq 1 ]; then
		echo "$lines"
	else
		echo "$lines" | fzf --query="$1"
	fi
}

# Select the closest match from fzf
function fzf_closest() {
	fzf --filter="$1" | head -n 1
}

# Fuzzy find file and jump to it's directory. Automatically select fzf result if only one match.
cdf() {
	local files
	# NOTE: uses fd rather than fzf --filter to get built-in gitignore support
	files=$(fd $1)
	if [ -z "$files" ]; then
		return 1
	elif [ $(wc -l <<<"$files") -eq 1 ]; then
		cd "$(dirname "$files")"
	else
		local selection=$(echo "$files" | fzf --height=40% --border --preview 'bat --color=always {}' --preview-window=right:60%)
		if [ -n "$selection" ]; then
			cd "$(dirname "$selection")"
		fi
	fi
}

# Fuzzy find directory and jump to it
cdd() {
	local dirs
	# NOTE: uses fd rather than fzf --filter to get built-in gitignore support
	dirs=$(fd -t d "$1")
	if [ -z "$dirs" ]; then
		return 1
	elif [ $(wc -l <<<"$dirs") -eq 1 ]; then
		cd "$dirs"
	else
		local selection=$(echo "$dirs" | fzf --height=40% --border --preview 'tree -C {}' --preview-window=right:60%)
		if [ -n "$selection" ]; then
			cd "$selection"
		fi
	fi
}

# Fuzzy jump backwards up the current directory tree
cdup() {
  local parent_dir
  parent_dir=$( (
    current_dir=$(pwd)
    while [ "$current_dir" != "/" ]; do
      echo "$current_dir"
      current_dir=$(dirname "$current_dir")
    done
    echo /
  ) | fzf --tac) # --tac reverses the list to show closest parents first

  # If a directory was selected (and not cancelled), cd into it
  if [ -n "$parent_dir" ]; then
    cd "$parent_dir" || return
  fi
}

# FIXME: Integrate cdd above, but add the depth option
# fuzzy directory with some depth
function cdds() {
	local dir=$(fd -d 4 -t d "$1" | fzf --height=40% --border --preview 'tree -C {}' --preview-window=right:60%)
	[ -n "$dir" ] && cd "$dir"
}

# fdr - cd to selected parent directory
function fdr() {
	local dirs=()
	get_parent_dirs() {
		if [[ -d ${1} ]]; then dirs+=("$1"); else return; fi
		if [[ ${1} == '/' ]]; then
			for _dir in "${dirs[@]}"; do echo "$_dir"; done
		else
			get_parent_dirs "$(dirname "$1")"
		fi
	}

	local DIR=""
	DIR=$(get_parent_dirs "$(realpath "${1:-$PWD}")" | fzf-tmux --tac)
	cd "$DIR" || exit
}

##
# Misc functions
##
nameshell() {
	echo -ne "\033]0;$*\007"
}

reload() {
	exec "${SHELL}" "$@"
}

escape() {
	# useful when you need to translate weird paths into single-argument string.
	local escape_string_input
	echo -n "String to escape: "
	# shellcheck disable=SC2162
	read escape_string_input
	printf '%q\n' "$escape_string_input"
}

# Talon plugins
#source ~/.talon/user/fidget/apps/zsh/zsh-completion-server/setup.zsh

# FIXME: Using $XDG_RUNTIME_DIR due to https://github.com/Mic92/sops-nix/issues/287

# Need to add a work-only option for this

#if [ "$(uname -s)" = "Darwin" ]; then
#    source $(getconf DARWIN_USER_TEMP_DIR)/secrets/ida_teams_vault
#else
#    source $XDG_RUNTIME_DIR/secrets/ida_teams_vault
#fi

# We shouldn't need this with programs.zoxide.enableZshIntegration but I seem to anyway :/
eval "$(zoxide init zsh)"

nix_wrapper() {
	if [[ $1 == "build" ]]; then
		shift
		nix_log_extract build "$@"
	else
		command nix "$@"
	fi
}

nix_log_extract() {
	# Run the original nix command and capture its output
	temp_file=$(mktemp)
	script -q -f "$temp_file" -c "command nix $*"
	drv_line=$(grep "For full logs, run" "$temp_file")

	if [ -n "$drv_line" ]; then
		# NOTE: The hard coding use of .drv is to prevent color sequences being tacked on the end
		# shellcheck disable=SC2001
		NIX_LAST_DERIVATION=$(echo "$drv_line" | sed "s/.*nix log \(.*\.drv\).*/\1/")
		export NIX_LAST_DERIVATION
		echo "Run nix-log-last to view log from $NIX_LAST_DERIVATION"
	fi
	rm "$temp_file"
}

# Helper to disable tab completion in some slow folders
# See https://superuser.com/questions/585545/how-to-disable-zsh-tab-completion-for-nfs-dirs
# Shellcheck doesn't like a lot of the zsh-specific stuff in here, so just disable for now
# shellcheck disable=all
# FIXME: Re-enable this once I figure out how to disable shfmt breaking checks
# function restricted-expand-or-complete() {
#
#    # split into shell words also at "=", if IFS is unset use the default (blank, \t, \n, \0)
#    local IFS="${IFS:- \n\t\0}="
#
#    # this word is completed
#    local complt
#
#    # if the cursor is following a blank, you are completing in CWD
#    # the condition would be much nicer, if it's based on IFS
#    # fmt: off
#    if [[ $LBUFFER[-1] = " " || $LBUFFER[-1] = "=" ]]; then
#       complt="$PWD"
#    else
#       # otherwise take the last word of LBUFFER
#       complt=${${=LBUFFER}[-1]}
#    fi
#
#    # determine the physical path, if $complt is not an option (i.e. beginning with "-")
#    [[ ${complt[1]} = "-" ]] || complt=${complt:A}/
#    # fmt: on
#
#    # activate completion only if the file is on a local filesystem, otherwise produce a beep
#    if [[ ! $complt = /mnt/* && ! $complt = /another/nfs-mount/* ]]; then
#       zle expand-or-complete
#    else
#       echo -en "\007"
#    fi
# }
# zle -N restricted-expand-or-complete
# bindkey "^I" restricted-expand-or-complete

alias nix='nix_wrapper'
alias nix-log-last='NIX_PAGER=cat nix log $NIX_LAST_DERIVATION'

git_smart_rebase() {
	GIT_STASH_MESSAGE="git_smart_rebase: $RANDOM"
	git stash push -m "$GIT_STASH_MESSAGE"
	git fetch && git rebase
	git stash list | (grep "${GIT_STASH_MESSAGE}" && git stash pop) || true
}

# Add and commit an updated flake lock file for the current or given host
bump_lock() {
    cd-gitroot
    if [ ! -e "locks" ]; then
        echo "WARN: Not in your nix-config folder"
    fi
    host="${1:$(hostname)}"
    git add "locks/${host}.lock"
    gcm "chore: bump ${host}lock"
}
